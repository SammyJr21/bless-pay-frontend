import React, { useState } from 'react';
import { IMaskInput } from 'react-imask';
import entryService from '../../api/entry.service';
import Scaffold from '../Scaffold';
import {
  Form,
  FormButton,
  FormH1,
  FormInput,
  FormLabel,
  FormSelect,
  Text,
} from './PixKeysElements';
import Swal from 'sweetalert2'
import withReactContent from 'sweetalert2-react-content'

const PixKeys = (props) => {
  const [selectValue, setSelectValue] = useState(1);
  const [form, setForm] = useState({
    entry: '',
  });

  const handleChange = (e) => {
    const { name, value } = e.target;

    setForm({ ...form, entry: value });
  };

  const list = [
    { id: 1, name: 'CPF / CNPJ', value: 'CPF_CNPJ' },
    { id: 2, name: 'E-Mail', value: 'EMAIL'},
    { id: 3, name: 'Phone', value: 'PHONE' },
    { id: 4, name: 'Random Key', values: 'EVP' },
  ];

  const getEntryType = () => {
    const entryType = list.find((entryType) => entryType.id == selectValue);
    return entryType.value;
  }

  const { children, titulo } = props;

  const Alert = withReactContent(Swal);

  const showAlert = (title, body, icon) => {
    Alert.fire({
      icon: icon,
      title: title,
      html: <p>{body}</p>
    })
  }

  const handleContinue = () => {
    console.log('click')
    entryService.createEntry(form.entry, getEntryType())
      .then((response) => {
        showAlert('Entry created successfully', undefined, 'success');
      }).catch((error) => {
        console.log(error);

        const errorMessage = error.response?.data?.error?.message

        showAlert('Oh no, an error occured :(', errorMessage, 'error');

      })
  };

  return (
    <>
      <Scaffold>
        <Form
          onSubmit={(e) => {
            e.preventDefault();
          }}
        >
          <FormH1>{titulo}</FormH1>
          <FormSelect
            value={selectValue}
            onChange={(e) => {
              setSelectValue(Number(e.target.value))
              setForm({...form, entry: ''})
            }}
          >
            {list.map((item) => (
              <option key={item.id} value={item.id}>
                {item.name}
              </option>
            ))}
          </FormSelect>
          <FormLabel hidden={selectValue !== 1} htmlFor='for'>
            CPF
          </FormLabel>
          <FormInput
            onChange={handleChange}
            name='entry'
            value={form.entry}
            as={IMaskInput}
            mask='000.000.000-00'
            placeholder='Insert your document (CPF/CNPJ)'
            hidden={selectValue !== 1}
            type='text'
            required={!(selectValue !== 1)}
          />
          <FormLabel hidden={selectValue !== 2} htmlFor='for'>
            E-mail
          </FormLabel>
          <FormInput
            name='email'
            onChange={handleChange}
            placeholder='Insert your email'
            value={form.entry}
            hidden={selectValue !== 2}
            type='email'
            required={!(selectValue !== 2)}
          />

          <FormLabel hidden={selectValue !== 3} htmlFor='for'>
            Celular
          </FormLabel>
          <FormInput
            name='phone'
            onChange={handleChange}
            as={IMaskInput}
            mask='(00) 00000-0000'
            placeholder='Insert your phone number'
            value={form.entry}
            hidden={selectValue !== 3}
            type='text'
            required={!(selectValue !== 3)}
          />

          {
            children != undefined || selectValue !== 4
            ?
            <>
              <FormLabel hidden={selectValue !== 4} htmlFor='for'>
                Chave aleatoria
              </FormLabel>
              <FormInput
                name='evp'
                onChange={handleChange}
                placeholder="Insert your"
                value={form.entry}
                hidden={selectValue !== 4}
                type='text'
                required={!(selectValue !== 4)}
              />
            </>
            :
            <>
              <Text style={{
                marginTop: '-.5em',
                marginBottom: '2em'

              }}>
                This entry will be generated by BlessPay.
              </Text>
            </>
          }

          
          {children}
          <FormButton onClick={handleContinue}>Continue</FormButton>
        </Form>
      </Scaffold>
    </>
  );
};
export default PixKeys;
